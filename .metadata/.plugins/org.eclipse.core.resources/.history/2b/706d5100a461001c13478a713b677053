package com.relativerecipes.RelativeRecipes.recipe.controller;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Date;

import javax.transaction.Transactional;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import com.relativerecipes.RelativeRecipes.recipe.model.Recipe;
import com.relativerecipes.RelativeRecipes.recipe.repository.RecipeRepository;

@RunWith(SpringRunner.class)
@SpringBootTest
@AutoConfigureMockMvc
@TestPropertySource(
		  locations = "classpath:application-integrationtest.properties")
@Transactional
public class RecipeControllerTest {
	
	@Autowired
    MockMvc mvc;
	
	@Autowired
	RecipeRepository recipeRepo;
	
	Recipe recipe;
	Date date;
	
	@BeforeEach
	public void setup() {
		recipe = new Recipe();
		recipe.setTitle("Test title");
		recipe.setText("Buy some food, cook it");
		date = new Date();
		recipe.setPostedDate(date);
	}
	
	@AfterEach
	public void tearDown() {
		recipeRepo.deleteAll();
		recipeRepo.flush();
	}

	@Test
	void testGetRecipe() {
		mvc.perform(put("/podcasts")
				.contentType(MediaType.APPLICATION_JSON)
				.content()
				.andExpect(status().isOk());
		
		assertEquals(1, podcastRepository.count());
		assertTrue(episodeRepository.count() > 0);
	}

}
